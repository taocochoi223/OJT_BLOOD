import { useState } from 'react';
import { Link, Navigate, useNavigate } from 'react-router-dom';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Checkbox } from '@/components/ui/checkbox';
import { TestTube, User, Mail, Lock, Shield, FileText, Users } from 'lucide-react';
import { useAuth } from '@/contexts/AuthContext';
import { useToast } from '@/hooks/use-toast';

const Register = () => {
    const [fullName, setFullName] = useState('');
    const [email, setEmail] = useState('');
    const [password, setPassword] = useState('');
    const [confirmPassword, setConfirmPassword] = useState('');
    const [agreeToTerms, setAgreeToTerms] = useState(false);
    const [isLoading, setIsLoading] = useState(false);

    const { isAuthenticated, register } = useAuth(); // üëâ l·∫•y register t·ª´ context
    const { toast } = useToast();
    const navigate = useNavigate();

    if (isAuthenticated) {
        return <Navigate to="/dashboard" replace />;
    }

    const handleSubmit = async (e: React.FormEvent) => {
        e.preventDefault();

        if (!fullName || !email || !password || !confirmPassword) {
            toast({
                title: "L·ªói",
                description: "Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin",
                variant: "destructive",
            });
            return;
        }

        if (password !== confirmPassword) {
            toast({
                title: "L·ªói",
                description: "M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp",
                variant: "destructive",
            });
            return;
        }

        if (!agreeToTerms) {
            toast({
                title: "L·ªói",
                description: "Vui l√≤ng ƒë·ªìng √Ω v·ªõi ƒëi·ªÅu kho·∫£n s·ª≠ d·ª•ng",
                variant: "destructive",
            });
            return;
        }

        setIsLoading(true);

        const success = await register(fullName, email, password);

        if (success) {
            toast({
                title: "ƒêƒÉng k√Ω th√†nh c√¥ng",
                description: "T√†i kho·∫£n ƒë√£ ƒë∆∞·ª£c t·∫°o!",
            });
            navigate("/login"); // üëâ sau khi ƒëƒÉng k√Ω xong chuy·ªÉn sang login
        } else {
            toast({
                title: "L·ªói",
                description: "Email ƒë√£ t·ªìn t·∫°i",
                variant: "destructive",
            });
        }

        setIsLoading(false);
    };

    return (
        <div className="min-h-screen bg-gradient-to-br from-medical-secondary to-background flex">
            {/* Left Column */}
            <div className="flex-1 flex items-center justify-center p-8">
                <div className="max-w-md w-full space-y-8 animate-fade-in">
                    <div className="text-center space-y-6">
                        <div className="flex justify-center">
                            <div className="bg-gradient-medical p-4 rounded-2xl shadow-medical">
                                <TestTube className="w-12 h-12 text-white" />
                            </div>
                        </div>

                        <div>
                            <h1 className="text-4xl font-bold bg-gradient-medical bg-clip-text text-transparent">
                                Ph√≤ng X√©t nghi·ªám M√°u
                            </h1>
                            <p className="text-lg text-muted-foreground mt-2">
                                H·ªá th·ªëng qu·∫£n l√Ω x√©t nghi·ªám hi·ªán ƒë·∫°i v√† chuy√™n nghi·ªáp
                            </p>
                        </div>

                        <div className="grid gap-4 text-center">
                            <div className="flex items-center justify-center space-x-3 p-4 bg-card rounded-xl shadow-card">
                                <Shield className="w-8 h-8 text-medical-primary" />
                                <div>
                                    <h3 className="font-semibold">B·∫£o m·∫≠t cao c·∫•p</h3>
                                    <p className="text-sm text-muted-foreground">
                                        D·ªØ li·ªáu ƒë∆∞·ª£c m√£ h√≥a v√† b·∫£o v·ªá tuy·ªát ƒë·ªëi
                                    </p>
                                </div>
                            </div>

                            <div className="flex items-center justify-center space-x-3 p-4 bg-card rounded-xl shadow-card">
                                <FileText className="w-8 h-8 text-medical-primary" />
                                <div>
                                    <h3 className="font-semibold">B√°o c√°o chi ti·∫øt</h3>
                                    <p className="text-sm text-muted-foreground">
                                        Th·ªëng k√™ v√† ph√¢n t√≠ch to√†n di·ªán
                                    </p>
                                </div>
                            </div>

                            <div className="flex items-center justify-center space-x-3 p-4 bg-card rounded-xl shadow-card">
                                <Users className="w-8 h-8 text-medical-primary" />
                                <div>
                                    <h3 className="font-semibold">Qu·∫£n l√Ω ƒëa vai tr√≤</h3>
                                    <p className="text-sm text-muted-foreground">
                                        Ph√¢n quy·ªÅn linh ho·∫°t theo ch·ª©c v·ª•
                                    </p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            {/* Right Column */}
            <div className="flex-1 flex items-center justify-center p-8">
                <Card className="w-full max-w-md shadow-elevated animate-scale-in">
                    <CardHeader className="space-y-2 text-center">
                        <CardTitle className="text-2xl font-bold">T·∫°o t√†i kho·∫£n m·ªõi</CardTitle>
                        <CardDescription>
                            ƒêi·ªÅn th√¥ng tin ƒë·ªÉ t·∫°o t√†i kho·∫£n h·ªá th·ªëng
                        </CardDescription>
                    </CardHeader>
                    <CardContent>
                        <form onSubmit={handleSubmit} className="space-y-4">
                            {/* Full Name */}
                            <div className="space-y-2">
                                <Label htmlFor="fullName">H·ªç v√† t√™n</Label>
                                <div className="relative">
                                    <User className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground" />
                                    <Input
                                        id="fullName"
                                        type="text"
                                        placeholder="Nh·∫≠p h·ªç v√† t√™n ƒë·∫ßy ƒë·ªß"
                                        value={fullName}
                                        onChange={(e) => setFullName(e.target.value)}
                                        className="pl-10"
                                        required
                                    />
                                </div>
                            </div>

                            {/* Email */}
                            <div className="space-y-2">
                                <Label htmlFor="email">Email</Label>
                                <div className="relative">
                                    <Mail className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground" />
                                    <Input
                                        id="email"
                                        type="email"
                                        placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ email"
                                        value={email}
                                        onChange={(e) => setEmail(e.target.value)}
                                        className="pl-10"
                                        required
                                    />
                                </div>
                            </div>

                            {/* Password */}
                            <div className="space-y-2">
                                <Label htmlFor="password">M·∫≠t kh·∫©u</Label>
                                <div className="relative">
                                    <Lock className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground" />
                                    <Input
                                        id="password"
                                        type="password"
                                        placeholder="T·∫°o m·∫≠t kh·∫©u"
                                        value={password}
                                        onChange={(e) => setPassword(e.target.value)}
                                        className="pl-10"
                                        required
                                    />
                                </div>
                            </div>

                            {/* Confirm Password */}
                            <div className="space-y-2">
                                <Label htmlFor="confirmPassword">X√°c nh·∫≠n m·∫≠t kh·∫©u</Label>
                                <div className="relative">
                                    <Lock className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground" />
                                    <Input
                                        id="confirmPassword"
                                        type="password"
                                        placeholder="Nh·∫≠p l·∫°i m·∫≠t kh·∫©u"
                                        value={confirmPassword}
                                        onChange={(e) => setConfirmPassword(e.target.value)}
                                        className="pl-10"
                                        required
                                    />
                                </div>
                            </div>

                            {/* Terms */}
                            <div className="flex items-center space-x-2">
                                <Checkbox
                                    id="terms"
                                    checked={agreeToTerms}
                                    onCheckedChange={(checked) => setAgreeToTerms(checked as boolean)}
                                />
                                <Label htmlFor="terms" className="text-sm">
                                    T√¥i ƒë·ªìng √Ω v·ªõi{" "}
                                    <Button variant="link" className="text-medical-primary p-0 h-auto">
                                        ƒêi·ªÅu kho·∫£n s·ª≠ d·ª•ng
                                    </Button>
                                </Label>
                            </div>

                            {/* Submit */}
                            <Button
                                type="submit"
                                className="w-full bg-gradient-medical hover:shadow-medical transition-all duration-300"
                                disabled={isLoading}
                            >
                                {isLoading ? "ƒêang t·∫°o t√†i kho·∫£n..." : "ƒêƒÉng k√Ω"}
                            </Button>

                            <div className="text-center">
                                <span className="text-sm text-muted-foreground">
                                    ƒê√£ c√≥ t√†i kho·∫£n?{" "}
                                    <Link
                                        to="/login"
                                        className="text-medical-primary hover:underline font-medium"
                                    >
                                        ƒêƒÉng nh·∫≠p
                                    </Link>
                                </span>
                            </div>
                        </form>

                    </CardContent>
                </Card>
            </div>
        </div>
    );
};

export default Register;
